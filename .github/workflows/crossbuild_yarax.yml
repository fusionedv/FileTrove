name: Build and Cross-Compile Go & Rust Project

on:
  workflow_dispatch:  # Enable manual triggering
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest]
        arch: [x64]
        include:
          # Linux x64
          - platform: ubuntu-latest
            arch: x64
          # Windows x64
          - platform: windows-latest
            arch: x64

    runs-on: ${{ matrix.platform }}

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Rust and install cargo-c
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cargo-c for Rust
        run: cargo install cargo-c

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc musl-tools libssl-dev pkg-config

      - name: Install dependencies on Windows
        if: runner.os == 'Windows'
        run: |
          choco install golang --version=1.20.3
          choco install mingw

      # Clone the yara-x repository
      - name: Clone yara-x repository and build
        run: | 
          git clone https://github.com/VirusTotal/yara-x.git
          mkdir -p $GITHUB_WORKSPACE/local/lib
          mkdir -p $GITHUB_WORKSPACE/local/include
          mkdir -p $GITHUB_WORKSPACE/local/lib/pkgconfig
          cd yara-x
          git checkout tags/v0.8.0

          if [ "${{ matrix.platform }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            rustup target add x86_64-unknown-linux-gnu
            export CC_x86_64_unknown_linux_gnu=gcc
            export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/local/lib/pkgconfig
            cargo cinstall -p yara-x-capi --release --target x86_64-unknown-linux-gnu --prefix=$GITHUB_WORKSPACE/local
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            rustup target add x86_64-pc-windows-gnu
            export CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc
            export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/local/lib/pkgconfig
            cargo cinstall -p yara-x-capi --release --target x86_64-pc-windows-gnu --prefix=$GITHUB_WORKSPACE/local
          fi

      # Build Go project (Cross-compiling for each platform)
      - name: Build Go project
        run: |
          export LIBRARY_PATH=$GITHUB_WORKSPACE/local/lib
          export C_INCLUDE_PATH=$GITHUB_WORKSPACE/local/include
          export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/local/lib/pkgconfig
          
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ] && [ "${{ matrix.arch }}" == "x64" ]; then
            CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o build/linux64/ftrove
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -o build/windows64/ftrove.exe
          fi

      # Upload the build artifacts (binaries and libraries)
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/

