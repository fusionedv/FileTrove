name: Build Go and Rust Library for Windows

on:
  workflow_dispatch:  # Enable manual triggering
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      # Cache Rust build
      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install cargo-c for building Rust C API
      - name: Install cargo-c for Rust
        run: cargo install cargo-c

      # Install necessary dependencies for Windows
      - name: Install dependencies on Windows
        run: |
          choco install golang --version=1.20.3
          choco install mingw

      # Clone the yara-x repository and build the Rust library
      - name: Clone and build yara-x Rust library
        run: | 
          git clone https://github.com/VirusTotal/yara-x.git
          mkdir -p $GITHUB_WORKSPACE/build/windows64
          cd yara-x
          git checkout tags/v0.8.0

          # Target for Windows
          rustup target add x86_64-pc-windows-gnu
          $env:CC_x86_64_pc_windows_gnu="x86_64-w64-mingw32-gcc"
          $env:PKG_CONFIG_PATH="$GITHUB_WORKSPACE/build/windows64/pkgconfig"

          # Build the library
          cargo cinstall -p yara-x-capi --release --target x86_64-pc-windows-gnu --prefix=$GITHUB_WORKSPACE/build/windows64

      # Move the compiled library to the build directory
      - name: Move Rust library to build directory
        run: |
          move $GITHUB_WORKSPACE/build/windows64/lib/yara_x_capi.dll $GITHUB_WORKSPACE/build/windows64

      # Build the Go project
      - name: Build Go project
        run: |
          $env:LIBRARY_PATH="$GITHUB_WORKSPACE/build/windows64"
          $env:C_INCLUDE_PATH="$GITHUB_WORKSPACE/build/windows64/include"
          $env:PKG_CONFIG_PATH="$GITHUB_WORKSPACE/build/windows64/pkgconfig"
          
          # Build Go binary
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -o build/windows64/ftrove.exe

      # Zip the Go binary and Rust library together
      - name: Create zip file with binary and library
        run: |
          powershell Compress-Archive -Path build/windows64/* -DestinationPath build/ftrove-windows64.zip

      # Upload the ZIP artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ftrove-windows64
          path: build/ftrove-windows64.zip
